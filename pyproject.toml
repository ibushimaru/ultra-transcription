[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ultra-audio-transcription"
version = "3.2.1"
description = "Professional GPU-accelerated audio transcription with advanced speaker recognition and 98.4% accuracy"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ultra Audio Transcription Team", email = "contact@ultra-transcription.dev"}
]
maintainers = [
    {name = "Development Team", email = "dev@ultra-transcription.dev"}
]
requires-python = ">=3.8"
keywords = [
    "audio", "transcription", "speech-to-text", "whisper", "speaker-identification", 
    "gpu-acceleration", "japanese", "voice-recognition", "ai", "machine-learning"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: GPU :: NVIDIA CUDA",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: Japanese",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Typing :: Typed"
]

dependencies = [
    # Core transcription
    "openai-whisper>=20231117",
    "faster-whisper>=1.0.0",
    
    # GPU acceleration
    "torch>=2.0.0",
    "torchaudio>=2.0.0",
    
    # Speaker diarization
    "pyannote.audio>=3.1.0",
    
    # Audio processing
    "librosa>=0.10.0",
    "soundfile>=0.12.0",
    "pydub>=0.25.0",
    "noisereduce>=3.0.0",
    
    # Data processing
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    
    # CLI and utilities
    "click>=8.0.0",
    "tqdm>=4.64.0",
    "rich>=13.0.0",
    "colorama>=0.4.6",
    
    # Data validation
    "pydantic>=2.0.0",
    "jsonschema>=4.17.0"
]

[project.optional-dependencies]
# GPU acceleration (CUDA)
gpu = [
    "cupy-cuda12x>=12.0.0",
    "nvidia-cublas-cu12",
    "nvidia-cudnn-cu12"
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0"
]

# Documentation
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0"
]

# Testing with real audio files
test = [
    "pytest-audio>=0.1.0",
    "pytest-datadir>=1.4.1",
    "pytest-mock>=3.11.1"
]

# All optional dependencies
all = [
    "ultra-audio-transcription[gpu,dev,docs,test]"
]

[project.urls]
Homepage = "https://github.com/ultra-transcription/ultra-audio-transcription"
Documentation = "https://ultra-transcription.readthedocs.io"
Repository = "https://github.com/ultra-transcription/ultra-audio-transcription.git"
Issues = "https://github.com/ultra-transcription/ultra-audio-transcription/issues"
Changelog = "https://github.com/ultra-transcription/ultra-audio-transcription/blob/main/CHANGELOG.md"

[project.scripts]
# Primary commands
ultra-transcribe = "transcription.gpu_ultra_precision_main:cli"
transcribe = "transcription.main:cli"

# Specialized commands
transcribe-precision = "transcription.ultra_precision_speaker_main:cli"
transcribe-turbo = "transcription.enhanced_turbo_main:cli"
transcribe-maximum = "transcription.maximum_precision_main:cli"
transcribe-realtime = "transcription.turbo_enhanced_main:cli"

# Utility commands
transcribe-benchmark = "transcription.benchmarks:run_benchmarks"
transcribe-validate = "transcription.data_schemas:validate_cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["transcription*"]
exclude = ["tests*", "docs*", "benchmarks*"]

[tool.setuptools.package-data]
transcription = [
    "configs/*.yaml",
    "configs/*.json",
    "data/*.json",
    "templates/*.txt"
]

# Development tools configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | test_outputs
  | testdata
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "soundfile.*",
    "noisereduce.*",
    "pyannote.*",
    "whisper.*",
    "faster_whisper.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=transcription",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU (deselect with '-m \"not gpu\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["transcription"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\.)?abstractmethod"
]

# Performance and optimization settings
[tool.ultra-transcription]
# Default configuration for the application
default_model = "large-v3-turbo"
default_device = "auto"
default_output_format = "standard"
enable_gpu_acceleration = true
enable_speaker_consistency = true
preserve_fillers = true
max_memory_usage_gb = 8.0
chunk_size_seconds = 15
overlap_seconds = 2.0

[tool.ultra-transcription.quality]
# Quality thresholds
min_confidence_threshold = 0.15
excellent_threshold = 0.90
outstanding_threshold = 0.95
speaker_confidence_threshold = 0.70

[tool.ultra-transcription.performance]
# Performance optimization settings
enable_ensemble_processing = true
enable_advanced_vad = true
enable_noise_reduction = true
enable_speech_enhancement = true
gpu_memory_fraction = 0.8
cpu_threads = "auto"

[tool.ultra-transcription.output]
# Output configuration
supported_formats = ["json", "csv", "txt", "srt"]
default_format_variants = ["compact", "standard", "extended", "api"]
enable_data_validation = true
auto_backup = false